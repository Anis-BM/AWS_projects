module "net_tokyo" {
  source              = "./modules/network"
  provider_alias      = "Tokyo"
  vpc_cidr            = "10.0.0.0/16"               # Manually input the VPC CIDR
  public_subnet_1_cidr = "10.0.1.0/24"               # Manually input the first subnet CIDR
  public_subnet_2_cidr = "10.0.2.0/24"               # Manually input the second subnet CIDR
  availability_zone_1  = "ap-northeast-1a"           # Manually input the first AZ
  availability_zone_2  = "ap-northeast-1c"           # Manually input the second AZ
  security_group_ingress_ports = [80, 443]           # Manually input allowed ports if necessary
}

module "net_new_york" {
  source              = "./modules/network"
  provider_alias      = "New_York"
  vpc_cidr            = "10.0.64.0/18"               # Manually input the VPC CIDR
  public_subnet_1_cidr = "10.0.65.0/24"               # Manually input the first subnet CIDR
  public_subnet_2_cidr = "10.0.66.0/24"               # Manually input the second subnet CIDR
  availability_zone_1  = "us-east-1a"                # Manually input the first AZ
  availability_zone_2  = "us-east-1b"                # Manually input the second AZ
  security_group_ingress_ports = [80]                # Allow only HTTP
}

module "net_hong_kong" {
  source              = "./modules/network"
  provider_alias      = "Hong_Kong"
  vpc_cidr            = "10.0.128.0/18"               # Manually input the VPC CIDR
  public_subnet_1_cidr = "10.0.129.0/24"               # Manually input the first subnet CIDR
  public_subnet_2_cidr = "10.0.130.0/24"               # Manually input the second subnet CIDR
  availability_zone_1  = "ap-east-1a"           # Manually input the first AZ
  availability_zone_2  = "ap-east-1b"           # Manually input the second AZ
  security_group_ingress_ports = [80, 443]           # Manually input allowed ports if necessary
}

module "net_london" {
  source              = "./modules/network"
  provider_alias      = "London"
  vpc_cidr            = "10.0.192.0/18"               # Manually input the VPC CIDR
  public_subnet_1_cidr = "10.0.193.0/24"               # Manually input the first subnet CIDR
  public_subnet_2_cidr = "10.0.194.0/24"               # Manually input the second subnet CIDR
  availability_zone_1  = "eu-west-2a"           # Manually input the first AZ
  availability_zone_2  = "eu-west-2b"           # Manually input the second AZ
  security_group_ingress_ports = [80, 443]           # Manually input allowed ports if necessary
}

module "net_australia" {
  source              = "./modules/network"
  provider_alias      = "Australia"
  vpc_cidr            = "10.1.0.0/18"               # Manually input the VPC CIDR
  public_subnet_1_cidr = "10.1.1.0/24"               # Manually input the first subnet CIDR
  public_subnet_2_cidr = "10.1.2.0/24"               # Manually input the second subnet CIDR
  availability_zone_1  = "ap-southeast-2a"           # Manually input the first AZ
  availability_zone_2  = "ap-southeast-2c"           # Manually input the second AZ
  security_group_ingress_ports = [80, 443]           # Manually input allowed ports if necessary
}

module "net_sao-paulo" {
  source              = "./modules/network"
  provider_alias      = "Sao_Paulo"
  vpc_cidr            = "10.1.64.0/18"               # Manually input the VPC CIDR
  public_subnet_1_cidr = "10.1.65.0/24"               # Manually input the first subnet CIDR
  public_subnet_2_cidr = "10.1.66.0/24"               # Manually input the second subnet CIDR
  availability_zone_1  = "sa-east-1a"           # Manually input the first AZ
  availability_zone_2  = "sa-east-1b"           # Manually input the second AZ
  security_group_ingress_ports = [80, 443]           # Manually input allowed ports if necessary
}

module "net_california" {
  source              = "./modules/network"
  provider_alias      = "California"
  vpc_cidr            = "10.1.128.0/18"               # Manually input the VPC CIDR
  public_subnet_1_cidr = "10.1.129.0/24"               # Manually input the first subnet CIDR
  public_subnet_2_cidr = "10.1.130.0/24"               # Manually input the second subnet CIDR
  availability_zone_1  = "us-west-1a"           
  availability_zone_2  = "us-west-1b"           
  security_group_ingress_ports = [80, 443]         
}

# VPC resources for each region
resource "aws_vpc" "tokyo_vpc" {
  provider             = aws.Tokyo
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "Tokyo-VPC"
  }
}

resource "aws_vpc" "new_york_vpc" {
  provider             = aws.New_York
  cidr_block           = "10.0.64.0/18"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "New_York-VPC"
  }
}

resource "aws_vpc" "hong_kong_vpc" {
  provider             = aws.Hong_Kong
  cidr_block           = "10.0.128.0/18"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "Hong_Kong-VPC"
  }
}

resource "aws_vpc" "london_vpc" {
  provider             = aws.London
  cidr_block           = "10.0.192.0/18"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "London-VPC"
  }
}

resource "aws_vpc" "australia_vpc" {
  provider             = aws.Australia
  cidr_block           = "10.1.0.0/18"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "Australia-VPC"
  }
}

resource "aws_vpc" "sao_paulo_vpc" {
  provider             = aws.Sao_Paulo
  cidr_block           = "10.1.64.0/18"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "Sao_Paulo-VPC"
  }
}

resource "aws_vpc" "california_vpc" {
  provider             = aws.California
  cidr_block           = "10.1.128.0/18"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "California-VPC"
  }
}


# Region-specific subnet, security group, and internet gateway creation
variable "region_config" {
  description = "Region configuration for subnets and security group ports"
  type = map(object({
    subnet_cidrs  = list(string)
    azs           = list(string)
    security_ports = list(number)
  }))
  default = {
    Tokyo = {
      subnet_cidrs = ["10.0.1.0/24", "10.0.2.0/24"]
      azs          = ["ap-northeast-1a", "ap-northeast-1c"]
      security_ports = [80, 443]
    },
    New_York = {
      subnet_cidrs = ["10.0.65.0/24", "10.0.66.0/24"]
      azs          = ["us-east-1a", "us-east-1b"]
      security_ports = [80]
    },
    Hong_Kong = {
      subnet_cidrs = ["10.0.129.0/24", "10.0.130.0/24"]
      azs          = ["ap-east-1a", "ap-east-1b"]
      security_ports = [80, 443]
    },
    London = {
      subnet_cidrs = ["10.0.193.0/24", "10.0.194.0/24"]
      azs          = ["eu-west-2a", "eu-west-2b"]
      security_ports = [80, 443]
    },
    Australia = {
      subnet_cidrs = ["10.1.1.0/24", "10.1.2.0/24"]
      azs          = ["ap-southeast-2a", "ap-southeast-2c"]
      security_ports = [80, 443]
    },
    Sao_Paulo = {
      subnet_cidrs = ["10.1.65.0/24", "10.1.66.0/24"]
      azs          = ["sa-east-1a", "sa-east-1b"]
      security_ports = [80, 443]
    },
    California = {
      subnet_cidrs = ["10.1.129.0/24", "10.1.130.0/24"]
      azs          = ["us-west-1a", "us-west-1b"]
      security_ports = [80, 443]
    }
  }
}

resource "aws_launch_template" "California_launch_template" {
  provider = aws.California

  name_prefix   = "California-launch-template"
  image_id      = "ami-038bba9a164eb3dc1" 
  instance_type = "t2.micro"

  user_data = base64encode(<<-EOF
    #!/bin/bash
    yum update -y
    yum install -y httpd
    systemctl start httpd
    systemctl enable httpd

    # Get the IMDSv2 token
    TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")

    # Background the curl requests
    curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/local-ipv4 &> /tmp/local_ipv4 & 
    curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/placement/availability-zone &> /tmp/az & 
    curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/ &> /tmp/macid & 
    wait

    macid=$(cat /tmp/macid)
    local_ipv4=$(cat /tmp/local_ipv4)
    az=$(cat /tmp/az)
    vpc=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$macid/vpc-id)

    # Create HTML file
    cat <<-HTML > /var/www/html/index.html
    <!doctype html>
    <html lang="en" class="h-100">
    <head>
    <title>Details for EC2 instance</title>
    </head>
    <body>
    <div>
    <h1>Malgus Clan</h1>
    <h1>Dont die from our medicine!</h1>
    <p><b>Instance Name:</b> $(hostname -f) </p>
    <p><b>Instance Private Ip Address: </b> $local_ipv4</p>
    <p><b>Availability Zone: </b> $az</p>
    <p><b>Virtual Private Cloud (VPC):</b> $vpc</p>
    </div>
    </body>
    </html>
    HTML

    # Clean up the temp files
    rm -f /tmp/local_ipv4 /tmp/az /tmp/macid
  EOF
  )
}

resource "aws_lb_target_group" "Stage1_tg" {
  provider    = aws.California
  name        = "California-target-group"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = aws_vpc.California_vpc.id
  target_type = "instance"

  health_check {
    enabled             = true
    interval            = 30
    path                = "/"
    protocol            = "HTTP"
    healthy_threshold   = 5
    unhealthy_threshold = 2
    timeout             = 5
    matcher             = "200"
  }

  tags = {
    Name = "Stage1TargetGroup"
  }
}


resource "aws_lb" "app1_alb" {
  name               = "app1-load-balancer"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.app1-sg02-LB01.id]
  subnets            = [
    aws_subnet.tokyo_subnet_1.id,
    aws_subnet.tokyo_subnet_2.id,
  ]
  enable_deletion_protection = false
#Lots of death and suffering here, make sure it's false

  tags = {
    Name    = "App1LoadBalancer"
    Service = "App1"
    Owner   = "User"
    Project = "Web Service"
  }
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.app1_alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.app1_tg.arn
  }
}





resource "aws_vpc" "this" {
  cidr_block           = var.cidr_block
  enable_dns_support   = var.enable_dns_support
  enable_dns_hostnames = var.enable_dns_hostnames
  tags                 = var.tags
}

resource "aws_subnet" "public" {
  count             = length(var.public_subnet_cidrs)
  vpc_id            = aws_vpc.this.id
  cidr_block        = var.public_subnet_cidrs[count.index]
  map_public_ip_on_launch = true
  availability_zone = element(var.availability_zones, count.index)
  tags              = var.tags
}

resource "aws_subnet" "private" {
  count             = length(var.private_subnet_cidrs)
  vpc_id            = aws_vpc.this.id
  cidr_block        = var.private_subnet_cidrs[count.index]
  availability_zone = element(var.availability_zones, count.index)
  tags              = var.tags
}

resource "aws_internet_gateway" "this" {
  vpc_id = aws_vpc.this.id
  tags   = var.tags
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.this.id
  tags   = var.tags
}

resource "aws_route" "internet_access" {
  route_table_id         = aws_route_table.public.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.this.id
}

resource "aws_route_table_association" "public_subnet" {
  count          = length(var.public_subnet_cidrs)
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public.id
}

# Elastic IP for NAT Gateway
resource "aws_eip" "nat" {
  vpc = true
  tags = var.tags
}

# NAT Gateway
resource "aws_nat_gateway" "this" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.public[0].id
  tags          = var.tags
}

# Private Route Table Update (Route through NAT Gateway)
resource "aws_route" "private_route" {
  route_table_id         = aws_route_table.private.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.this.id
}

resource "aws_route_table_association" "private_subnet" {
  count          = length(var.private_subnet_cidrs)
  subnet_id      = aws_subnet.private[count.index].id
  route_table_id = aws_route_table.private.id
}

# Security Group for Load Balancer
resource "aws_security_group" "lb" {
  name        = "lb-sg"
  description = "Allow HTTP and HTTPS"
  vpc_id      = aws_vpc.this.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = var.tags
}

# Application Load Balancer
resource "aws_lb" "this" {
  name               = "app-lb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.lb.id]
  subnets            = aws_subnet.public[*].id
  tags               = var.tags
}

# HTTPS Listener
resource "aws_lb_listener" "https" {
  load_balancer_arn = aws_lb.this.arn
  port              = 443
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
  certificate_arn   = var.certificate_arn

  default_action {
    type = "forward"
    target_group_arn = aws_lb_target_group.this.arn
  }
}

# Target Group for Load Balancer
resource "aws_lb_target_group" "this" {
  name        = "app-target-group"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = aws_vpc.this.id
  health_check {
    path                = "/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 5
    unhealthy_threshold = 2
  }
  tags = var.tags
}

# Security Group for ASG Instances
resource "aws_security_group" "asg" {
  name        = "asg-sg"
  description = "Allow HTTP, HTTPS, and SSH"
  vpc_id      = aws_vpc.this.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = var.ssh_allowed_cidrs
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = var.tags
}

# Launch Template
resource "aws_launch_template" "this" {
  name_prefix   = "app-lt"
  image_id      = var.ami_id
  instance_type = var.instance_type
  key_name      = var.key_name

  network_interfaces {
    security_groups = [aws_security_group.asg.id]
    associate_public_ip_address = true
  }

  tag_specifications {
    resource_type = "instance"
    tags          = var.tags
  }
}

# Auto Scaling Group
resource "aws_autoscaling_group" "this" {
  launch_template {
    id      = aws_launch_template.this.id
    version = "$Latest"
  }

  vpc_zone_identifier = aws_subnet.private[*].id
  min_size            = var.asg_min_size
  max_size            = var.asg_max_size
  desired_capacity    = var.asg_desired_capacity

  target_group_arns = [aws_lb_target_group.this.arn]

  
}

resource "aws_autoscaling_group" "tokyo_asg" {
  provider                = aws.Tokyo
  launch_template {
    id      = aws_launch_template.tokyo_launch_template.id
    version = "$Latest"
  }

  min_size         = 1
  max_size         = 3
  desired_capacity = 2

  vpc_zone_identifier = [
    "subnet-12345678", # Add your public/private subnet IDs
    "subnet-87654321"
  ]

  tags = [
    {
      key                 = "Name"
      value               = "tokyo-asg-instance"
      propagate_at_launch = true
    }
  ]

  target_group_arns = [aws_lb_target_group.tokyo_tg.arn] # Add target group ARN if used
}

#to build just the tgw
#module call in the root
module "tokyo_tgw" {
  source           = "./modules/tgw"
  description      = "Tokyo Transit Gateway"
  amazon_side_asn  = 64512
  tags             = { Environment = "Production", Name = "Tokyo-TGW" }
  providers        = { aws = aws.Tokyo }
}

# transit gateway

resource "aws_ec2_transit_gateway" "this" {
  description     = var.description
  amazon_side_asn = var.amazon_side_asn
  tags            = var.tags
}

output "transit_gateway_id" {
  description = "The ID of the Transit Gateway"
  value       = aws_ec2_transit_gateway.this.id
}

# variables.tf

variable "description" {
  description = "Description of the Transit Gateway"
  type        = string
}

variable "amazon_side_asn" {
  description = "Amazon-side ASN for the Transit Gateway"
  type        = number
  default     = 64512
}

variable "tags" {
  description = "Tags for the Transit Gateway"
  type        = map(string)
}
